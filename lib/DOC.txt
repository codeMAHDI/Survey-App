Firebase Firestore File Upload & Download Management:
<<<<<<< HEAD
1. We can store file info in DB but we can't store direct file.It's not recommended.
2. FireStore rules->
Firebase Security Rules are access control rules that define
who can read, write, or update data in your Firebase services
(like Firestore, Realtime Database, or Storage).
3. Index Rule->
In Cloud Firestore, an index helps Firebase search, sort, and filter
documents quickly — especially when you perform complex queries
(like combining .where() with .orderBy() or multiple .where() conditions).
4. Format of rules->
 {
    "rules":{
    "foo":{//foo-> Any collection/users/files
    ".read":true,
    ".write":false
    }
    }
    }
     foo/bar/baz->if there is a nested users. So we don't need to write rules for all
     of these. Just write for foo then it will be applied no others. This is called
     cascading effect.
5. Now we also give access to specific user->
{
    "rules":{
    "users":{//Users collection
    "$uid":{//1 specific user id
    write: "$uid"== auth.uid//only those user can write if the $uid is authenticate id.
    }
    }
    }
    }
6. Now lets see validation->
Validation rules are conditions used to check the correctness of input data
before accepting or processing it. They help ensure the data is:
->Valid (correct type/format)
->Complete (required fields filled)
->Safe (no dangerous or unexpected content)
Common Validation Rules (General):
| Rule        | Meaning                              | Example                           |
| ----------- | ------------------------------------ | --------------------------------- |
| `required`  | Must not be empty                    | `"Username is required"`          |
| `minLength` | Must be at least X characters        | Password must be at least 6 chars |
| `maxLength` | Must be less than X characters       | Name max 50 chars                 |
| `pattern`   | Must match a specific format (RegEx) | Email format, phone number        |
| `isEmail`   | Must be a valid email                | `abc@gmail.com`                   |
| `isNumeric` | Must contain only numbers            | `12345`                           |
| `match`     | Must match another value             | Confirm password = password       |

 {
    "rules":{
    "foo":{
    ".validate":"newData .val().length<100"
    }
    }
    }
7. We'll upload a file from our app in firebase storage. Also download the file.
And we'll download the file using download url. That's why we'll use this
package(firebase_storage:^12.4.4). And for file we'll use image picker package(image_picker:^1.1.2)
Also when we upload a file we get a download url. We'll save that on firestore.
And at the same time using that download url we'll download.
That's why we'll use this package(url_launcher: ^6.3.1)
8. Now lets create dart file under lib-> storage_service.dart
The main work of this file is to upload files and then get the stream.

import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_storage/firebase_storage.dart';
import 'package:image_picker/image_picker.dart';

class StorageService{
  final FirebaseStorage _storage = FirebaseStorage.instance;
  final FirebaseFirestore _db = FirebaseFirestore.instance;
  final ImagePicker _picker = ImagePicker();//To pick the image

  /// Upload Image & Save Metadata in Firestore
  Future<void> uploadFile() async{
    final pickedFile = await _picker.pickImage(source: ImageSource.camera);//First we want to upload so that's why we need to pick the file.
    if(pickedFile==null) return;

    File file = File(pickedFile.path);// pickedFile is a Xfile object . So here we are converting this object to file from its path.
    String fileName = DateTime.now().millisecondsSinceEpoch.toString();//This is a common trick to generate a unique filename or ID
    Reference _storageRef = _storage.ref().child('uploads/$fileName.jpg');//Same as db we took a Reference also here we've to take the Reference(Tells Firebase Storage exactly where to store the file) of storage.
    try{
      UploadTask uploadTask = _storageRef.putFile(file);//For upload
      TaskSnapshot snapshot = await uploadTask;//Then we need snapshot(Update)
      String downloadUrl = await snapshot.ref.getDownloadURL();//From snapshot we can get image download url

      //Save Metadata in Firestore
      await _db.collection('files').add({
        "fileName": fileName,
        "fileUrl": downloadUrl,
        "uploadedAt": FieldValue.serverTimestamp(),
      });

    }catch(e){
      print("Upload Error: $e");
    }
  }

  /// Get Files Stream(A stream is a way to receive data over time — like a data pipe. It delivers a sequence of asynchronous events (data, errors, or done) that you can listen to and react to in your app.)
  Stream<QuerySnapshot> getFiles() {//This function returns a real-time stream of documents from the files collection in Firebase Firestore, ordered by the uploadedAt field in descending order (i.e., newest first).
    return _db.collection('files').orderBy('uploadedAt', descending: true).snapshots();
  }
}
9. Now lets make



